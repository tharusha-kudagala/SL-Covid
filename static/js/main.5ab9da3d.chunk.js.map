{"version":3,"sources":["Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","date","className","Date","getFullYear","App","state","details","hospital","axios","get","then","res","console","log","setState","data","hospital_data","updateDate","this","update_date_time","class","style","marginTop","fontSize","fontWeight","global_total_cases","global_deaths","global_new_deaths","global_recovered","local_total_cases","local_deaths","local_new_deaths","local_recovered","width","map","x","margin","name_si","cumulative_total","treatment_total","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ab9da3d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = ({date}) =>{\r\n    return(\r\n        <nav>\r\n        <div className=\"nav-wrapper \">\r\n        <a className=\"brand-logo center\">Corona Updates - {date} TKSOFT Â© {new Date().getFullYear()} </a>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport axios from 'axios';\n\nclass App extends Component {\n\nstate = {\n  details : {},\n  hospital : [],\n\n}\n\n  componentDidMount(){\n    axios.get('https://hpb.health.gov.lk/api/get-current-statistical')\n    .then(res =>{\n      console.log(res);\n      this.setState({\n        //global_deaths:res.data.data.global_deaths\n        details:res.data.data\n      });\n\n      this.setState({\n        hospital:res.data.data.hospital_data\n      })\n    })\n  }\n  render(){\n\n    const updateDate = this.state.details.update_date_time\n    return (\n\n    <div>\n    <Navbar date={updateDate} />\n\n    <div class=\"row\" style={{marginTop: \"1%\"}}>\n    <div class=\"col s12 m6\">\n      <div class=\"card black darken-3\">\n        <div class=\"card-content white-text\">\n          <span class=\"card-title center\" style={{fontSize:\"18pt\", fontWeight:\"bold\"}}>Global Details</span>\n          <table className=\"striped\" style={{fontSize:\"20pt\"}}>\n          <tr  className=\"blue\">\n          <td></td>\n          <td>Total Cases </td>\n          <td>{this.state.details.global_total_cases}</td>\n          <td></td>\n          </tr>\n          <tr className=\"red\">\n          <td></td>\n          <td>Deaths </td>\n          <td>{this.state.details.global_deaths}</td>\n          <td></td>\n          </tr>\n          <tr className=\"yellow darken-2\">\n          <td></td>\n          <td>New Deaths </td>\n          <td>{this.state.details.global_new_deaths}</td>\n          <td></td>\n          </tr>\n          <tr className=\"green darken-2\">\n          <td></td>\n          <td>Recovered </td>\n          <td>{this.state.details.global_recovered}</td>\n          <td></td>\n          </tr>\n          </table>\n        \n        </div>\n      </div>\n    </div>\n\n    <div class=\"col s12 m6\">\n      <div class=\"card black darken-3\">\n        <div class=\"card-content white-text\">\n          <span class=\"card-title center\" style={{fontSize:\"18pt\", fontWeight:\"bold\"}}>Local Details</span>\n\n          <table className=\"striped\" style={{fontSize:\"20pt\"}}>\n          <tr className=\"blue\">\n          <td></td>\n          <td>Total Cases </td>\n          <td>{this.state.details.local_total_cases}</td>\n          <td></td>\n          </tr>\n          <tr className=\"red\">\n          <td></td>\n          <td>Deaths </td>\n          <td>{this.state.details.local_deaths}</td>\n          <td></td>\n          </tr>\n          <tr className=\"yellow darken-2\">\n          <td></td>\n          <td>New Deaths </td>\n          <td>{this.state.details.local_new_deaths}</td>\n          <td></td>\n          </tr>\n          <tr className=\"green darken-2\">\n          <td></td>\n          <td>Recovered </td>\n          <td>{this.state.details.local_recovered}</td>\n          <td></td>\n          </tr>\n          </table>\n          \n        </div>\n      </div>\n    </div>\n    <table className=\"\" style={{fontSize:\"16pt\" , marginTop:\"3%\"}}>\n          <tr>\n            <td className=\"purple white-text darken-3 center\" style={{width:\"30%\", fontWeight:\"bolder\"}}>Name of the Hospital</td>\n            <td className=\"pink white-text darken-3 center\" style={{width:\"30%\", fontWeight:\"bolder\"}}>Cumulative Total</td>\n            <td className=\"orange white-text darken-3 center\" style={{width:\"30%\", fontWeight:\"bolder\"}}>Treatment Total</td>\n          </tr>\n      </table>\n</div>\n  {this.state.hospital.map(x =>{\n    return(\n      \n      <div className=\"center\">\n      <table className=\"responsive-table\" style={{fontSize:\"16pt\" , margin:\"0pt 0pt 10pt 0pt\"}}>\n          <tr>\n            <td className=\"purple white-text\" style={{width:\"30%\", fontWeight:\"bolder\"}}>{x.hospital.name_si}</td>\n            <td className=\"pink white-text center\" style={{width:\"30%\"}}>{x.cumulative_total}</td>\n            <td className=\"orange white-text center\" style={{width:\"30%\"}}>{x.treatment_total}</td>\n          </tr>\n      </table>\n      </div>\n    )\n   \n  })}\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}